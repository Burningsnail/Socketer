// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "Public/Socketer.h"
#include "Socketer.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1Socketer() {}
	void USocket::StaticRegisterNativesUSocket()
	{
	}
	IMPLEMENT_CLASS(USocket, 2552929806);
	void USocketerBPLibrary::StaticRegisterNativesUSocketerBPLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(USocketerBPLibrary::StaticClass(), "CloseConnection",(Native)&USocketerBPLibrary::execCloseConnection);
		FNativeFunctionRegistrar::RegisterFunction(USocketerBPLibrary::StaticClass(), "Connect",(Native)&USocketerBPLibrary::execConnect);
		FNativeFunctionRegistrar::RegisterFunction(USocketerBPLibrary::StaticClass(), "GetMessage",(Native)&USocketerBPLibrary::execGetMessage);
		FNativeFunctionRegistrar::RegisterFunction(USocketerBPLibrary::StaticClass(), "HasPendingData",(Native)&USocketerBPLibrary::execHasPendingData);
		FNativeFunctionRegistrar::RegisterFunction(USocketerBPLibrary::StaticClass(), "SendMessage",(Native)&USocketerBPLibrary::execSendMessage);
		FNativeFunctionRegistrar::RegisterFunction(USocketerBPLibrary::StaticClass(), "SocketerSampleFunction",(Native)&USocketerBPLibrary::execSocketerSampleFunction);
	}
	IMPLEMENT_CLASS(USocketerBPLibrary, 2237015256);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();

	SOCKETER_API class UClass* Z_Construct_UClass_USocket_NoRegister();
	SOCKETER_API class UClass* Z_Construct_UClass_USocket();
	SOCKETER_API class UFunction* Z_Construct_UFunction_USocketerBPLibrary_CloseConnection();
	SOCKETER_API class UFunction* Z_Construct_UFunction_USocketerBPLibrary_Connect();
	SOCKETER_API class UFunction* Z_Construct_UFunction_USocketerBPLibrary_GetMessage();
	SOCKETER_API class UFunction* Z_Construct_UFunction_USocketerBPLibrary_HasPendingData();
	SOCKETER_API class UFunction* Z_Construct_UFunction_USocketerBPLibrary_SendMessage();
	SOCKETER_API class UFunction* Z_Construct_UFunction_USocketerBPLibrary_SocketerSampleFunction();
	SOCKETER_API class UClass* Z_Construct_UClass_USocketerBPLibrary_NoRegister();
	SOCKETER_API class UClass* Z_Construct_UClass_USocketerBPLibrary();
	SOCKETER_API class UPackage* Z_Construct_UPackage__Script_Socketer();
	UClass* Z_Construct_UClass_USocket_NoRegister()
	{
		return USocket::StaticClass();
	}
	UClass* Z_Construct_UClass_USocket()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Socketer();
			OuterClass = USocket::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Socket.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Socket.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USocket(Z_Construct_UClass_USocket, &USocket::StaticClass, TEXT("USocket"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USocket);
	UFunction* Z_Construct_UFunction_USocketerBPLibrary_CloseConnection()
	{
		struct SocketerBPLibrary_eventCloseConnection_Parms
		{
			USocket* Connection;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USocketerBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CloseConnection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(SocketerBPLibrary_eventCloseConnection_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SocketerBPLibrary_eventCloseConnection_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SocketerBPLibrary_eventCloseConnection_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SocketerBPLibrary_eventCloseConnection_Parms), sizeof(bool), true);
			UProperty* NewProp_Connection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Connection"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Connection, SocketerBPLibrary_eventCloseConnection_Parms), 0x0010000000000080, Z_Construct_UClass_USocket_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Networking|Socketer"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Close connection to TCP server"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Socketer disconnect close tcpclose tcp tcpdisconnect socketerdisconnect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SocketerBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USocketerBPLibrary_Connect()
	{
		struct SocketerBPLibrary_eventConnect_Parms
		{
			FString IP;
			int32 port;
			bool success;
			USocket* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USocketerBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Connect"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(SocketerBPLibrary_eventConnect_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, SocketerBPLibrary_eventConnect_Parms), 0x0010000000000580, Z_Construct_UClass_USocket_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(success, SocketerBPLibrary_eventConnect_Parms, bool);
			UProperty* NewProp_success = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("success"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(success, SocketerBPLibrary_eventConnect_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(success, SocketerBPLibrary_eventConnect_Parms), sizeof(bool), true);
			UProperty* NewProp_port = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("port"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(port, SocketerBPLibrary_eventConnect_Parms), 0x0010000000000080);
			UProperty* NewProp_IP = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IP"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(IP, SocketerBPLibrary_eventConnect_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Networking|Socketer"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Connect to a TCP server"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Socketer connect tcp tcpconnect socketerconnect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SocketerBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USocketerBPLibrary_GetMessage()
	{
		struct SocketerBPLibrary_eventGetMessage_Parms
		{
			USocket* Connection;
			FString Message;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USocketerBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMessage"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(SocketerBPLibrary_eventGetMessage_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SocketerBPLibrary_eventGetMessage_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SocketerBPLibrary_eventGetMessage_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SocketerBPLibrary_eventGetMessage_Parms), sizeof(bool), true);
			UProperty* NewProp_Message = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Message"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Message, SocketerBPLibrary_eventGetMessage_Parms), 0x0010000000000180);
			UProperty* NewProp_Connection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Connection"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Connection, SocketerBPLibrary_eventGetMessage_Parms), 0x0010000000000080, Z_Construct_UClass_USocket_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Networking|Socketer"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get buffer (converted to FText) from server"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Socketer send message tcpsend tcp tcpdisconnect socketersend"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SocketerBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USocketerBPLibrary_HasPendingData()
	{
		struct SocketerBPLibrary_eventHasPendingData_Parms
		{
			USocket* Connection;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USocketerBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasPendingData"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(SocketerBPLibrary_eventHasPendingData_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SocketerBPLibrary_eventHasPendingData_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SocketerBPLibrary_eventHasPendingData_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SocketerBPLibrary_eventHasPendingData_Parms), sizeof(bool), true);
			UProperty* NewProp_Connection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Connection"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Connection, SocketerBPLibrary_eventHasPendingData_Parms), 0x0010000000000080, Z_Construct_UClass_USocket_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Networking|Socketer"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HasPendingData"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Socketer send message tcpsend tcp tcpdisconnect socketersend"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SocketerBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USocketerBPLibrary_SendMessage()
	{
		struct SocketerBPLibrary_eventSendMessage_Parms
		{
			USocket* Connection;
			FString Message;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USocketerBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SendMessage"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(SocketerBPLibrary_eventSendMessage_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SocketerBPLibrary_eventSendMessage_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SocketerBPLibrary_eventSendMessage_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SocketerBPLibrary_eventSendMessage_Parms), sizeof(bool), true);
			UProperty* NewProp_Message = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Message"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Message, SocketerBPLibrary_eventSendMessage_Parms), 0x0010000000000080);
			UProperty* NewProp_Connection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Connection"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Connection, SocketerBPLibrary_eventSendMessage_Parms), 0x0010000000000080, Z_Construct_UClass_USocket_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Networking|Socketer"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Send message to the server"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Socketer send message tcpsend tcp tcpdisconnect socketersend"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SocketerBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USocketerBPLibrary_SocketerSampleFunction()
	{
		struct SocketerBPLibrary_eventSocketerSampleFunction_Parms
		{
			float Param;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USocketerBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SocketerSampleFunction"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(SocketerBPLibrary_eventSocketerSampleFunction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SocketerBPLibrary_eventSocketerSampleFunction_Parms), 0x0010000000000580);
			UProperty* NewProp_Param = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Param"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Param, SocketerBPLibrary_eventSocketerSampleFunction_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SocketerTesting"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Execute Sample function"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Socketer sample test testing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SocketerBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USocketerBPLibrary_NoRegister()
	{
		return USocketerBPLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_USocketerBPLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_Socketer();
			OuterClass = USocketerBPLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_USocketerBPLibrary_CloseConnection());
				OuterClass->LinkChild(Z_Construct_UFunction_USocketerBPLibrary_Connect());
				OuterClass->LinkChild(Z_Construct_UFunction_USocketerBPLibrary_GetMessage());
				OuterClass->LinkChild(Z_Construct_UFunction_USocketerBPLibrary_HasPendingData());
				OuterClass->LinkChild(Z_Construct_UFunction_USocketerBPLibrary_SendMessage());
				OuterClass->LinkChild(Z_Construct_UFunction_USocketerBPLibrary_SocketerSampleFunction());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USocketerBPLibrary_CloseConnection(), "CloseConnection"); // 3556999492
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USocketerBPLibrary_Connect(), "Connect"); // 353155596
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USocketerBPLibrary_GetMessage(), "GetMessage"); // 1958192137
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USocketerBPLibrary_HasPendingData(), "HasPendingData"); // 601661837
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USocketerBPLibrary_SendMessage(), "SendMessage"); // 3310009319
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USocketerBPLibrary_SocketerSampleFunction(), "SocketerSampleFunction"); // 3867516118
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SocketerBPLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/SocketerBPLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("*      Function library class.\n*      Each function in it is expected to be static and represents blueprint node that can be called in any blueprint.\n*\n*      When declaring function you can define metadata for the node. Key function specifiers will be BlueprintPure and BlueprintCallable.\n*      BlueprintPure - means the function does not affect the owning object in any way and thus creates a node without Exec pins.\n*      BlueprintCallable - makes a function which can be executed in Blueprints - Thus it has Exec pins.\n*      DisplayName - full name of the node, shown when you mouse over the node and in the blueprint drop down menu.\n*                              Its lets you name the node using characters not allowed in C++ function names.\n*      CompactNodeTitle - the word(s) that appear on the node.\n*      Keywords -      the list of keywords that helps you to find node when you search for it using Blueprint drop-down menu.\n*                              Good example is \"Print String\" node which you can find also by using keyword \"log\".\n*      Category -      the category your node will be under in the Blueprint drop-down menu.\n*\n*      For more info on custom blueprint nodes visit documentation:\n*      https://wiki.unrealengine.com/Custom_Blueprint_Node_Creation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USocketerBPLibrary(Z_Construct_UClass_USocketerBPLibrary, &USocketerBPLibrary::StaticClass, TEXT("USocketerBPLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USocketerBPLibrary);
	UPackage* Z_Construct_UPackage__Script_Socketer()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/Socketer")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xCA780E69;
			Guid.B = 0x466194B2;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
